CS 519-005, Algorithms (MS/MEng-level), Fall 2016
HW7 - Redo hardest problems from Midterm

Due electronically on Canvas on *Monday* Nov 7, 11:59pm.
No late submission will be accepted.

Purposes of this mini-HW:
a) give you a second (take-home) chance to the hard problems.
b) nbest.py will be reused as part of the challenge problem.

Include in your submission: report.txt, nbest.py, coins.py.
nbest.py will be graded for correctness.

1. [Part (a) WILL BE GRADED]

Given k pairs of lists A_i and B_i (0 <= i < k),
each with n sorted numbers,
find the n smallest pairs in all k \times n^2 pairs,
and we say (x,y) < (x', y') if and only if x+y < x'+y'.
Tie-breaking: lexicographical (i.e., prefer smaller x).

Hint: This is probably shortest code but {\bf not} necessarily the fastest.

(a) Complete the following code from the midterm.

from heapq import heappush, heappop
def nbest(ABs):    # no need to pass in k or n
    k = len(ABs)
    n = len(ABs[0][0])
    def trypush(i, p, q):  # push pair (A_i,p, B_i,q) if possible
        A, B = ABs[i] # A_i, B_i
        if p < n and q < n and ______________________________:
            heappush(h, (________________, i, p, q, (A[p],B[q])))
            used.add((i, p, q))
    h, used = ___________________                    # initialize
    for i in xrange(k): 
        trypush(i, 0, 0)
    for _ in xrange(n): 
        _, i, p, q, pair = ________________
        yield pair     # return the next pair (in a lazy list)
        _______________________
        _______________________

  Time complexity: O(klogk+nlog(n+k))

(b) Describe two improvements to make it faster (for the cases where k>>n).
    Analyze their time complexities.

    (NO NEED to implement them now, but they might be useful in the challenge problem)
 
    >>> list(nbest([([1,2,4], [2,3,5]), ([0,2,4], [3,4,3])])) 

    [(0, 3), (1, 2), (1, 3)]

    >>> list(nbest([([-1,2],[1,4]), ([0,2],[3,4]), ([0,1],[4,6]), ([-1,2],[1,5])])) 
    [(-1, 1), (-1, 1)]

    >>> list(nbest[([5,6,10,14],[3,5,10,14]),([2,7,9,11],[3,8,12,16]),([1,3,8,10],[5,9,10,11]),([1,2,3,5],[3,4,9,10]),([4,5,9,10],[2,4,6,11]),([4,6,10,13],[2,3,5,9]),([3,7,10,12],[1,2,5,10]),([5,9,14,15],[4,8,13,14])])

    [(1, 3), (3, 1), (1, 4), (2, 3)]

    >>> list(nbest([([1,6,8,13],[5,8,11,12]),([1,2,3,5],[5,9,11,13]),([3,5,7,10],[4,6,7,11]),([1,4,7,8],[4,9,11,15]),([4,8,10,13],[4,6,10,11]),([4,8,12,15],[5,10,11,13]),([2,3,4,8],[4,7,11,15]),([4,5,10,15],[5,6,7,8])])

    [(1, 4), (1, 5), (1, 5), (2, 4)]

    1. Initial heap with heapify
    Time complexity: O(k+nlog(n+k))
    Space complexity: O(k)
    2. plused quick select to find n pairs
    Time complexity: O(k+nlogn)
    Space complexity: O(n)
    3. use max-heap to find n pairs (extra)
    Time complexity: O(klogn+nlogn)
    Space complexity: O(k)


2. coins.py
   
   Minimize the number of types of coins.

   >>> best(47, [6, 10, 15])
   (3, [2, 2, 1])

   >>> best(59, [6, 10, 15])
   (3, [4, 2, 1])	

   >>> best(37, [4, 6, 15])
   (3, [4, 1, 1])
 
   >>> best(27, [4, 6, 15])
   (2, [3, 0, 1])

   >>> best(75, [4, 6, 15])
   (1, [0, 0, 5])

   >>> best(17, [2, 4, 6])
   None

   Note: if impossible, return None.
   Time complexity: O(nx)
   Space complexity: O(x)




In report.txt, don't forget to analyze time/space complexities for 1(a), 1(b), and 2.


Debriefing (required!): --------------------------

0. What's your name?
Ming-hung Shih
1. Approximately how many hours did you spend on this assignment?
12 hours
2. Would you rate it as easy, moderate, or difficult?
difficult
3. Did you work on it mostly alone, or mostly with other people?
mostly alone
4. How deeply do you feel you understand the material it covers (0%â€“100%)? 
70%

[NEW QUESTIONS]
5. Did you like the Midterm? If not, which part(s) do you dislike the most?
no, short time
6. Do you feel this HW (as a second-chance to midterm or as a take-home quiz) is helpful?
yes, it's helpful.

This section is intended to help us calibrate the homework assignments. 
Your answers to this section will *not* affect your grade; however, skipping it
will certainly do.
